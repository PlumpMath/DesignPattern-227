package proxypattern;

/**代理模式：给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。
 * 角色包含：Subject（抽象主题角色）：声明了真实主题和代理主题的共同接口，客户端针对抽象主题角色进行编程
 * Proxy（代理主题角色）：包含了对真实主题的引用，因此可以操作真实主题对象；实现抽象主题接口，因此可以全权代理真实主题；
 *                      代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束
 * RealSubject（真实主题角色）：定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作
 *
 * 代理模式分类：
 * 远程代理(Remote Proxy)：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使(Ambassador)。
 * 虚拟代理(Virtual Proxy)：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。
 * 保护代理(Protect Proxy)：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限
 * 缓冲代理(Cache Proxy)：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果
 * 智能引用代理(Smart Reference Proxy)：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。
 *
 * 优势：一定程度上降低了系统的耦合度。客户端可以针对抽象主题角色进行编程。
 * Created by Heyha on 2017/1/4.
 */
public class HomeMain {
    public static void main(String[] args) {
        Searcher searcher = new ProxySearcher();
        searcher.doSearch("杨过","123");
    }
}
